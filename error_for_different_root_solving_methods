% Finishing the rescitation

clc;
clear;
clf
close all
format long



% 3a.
t = 0:0.1:10;
figure
plot(t,besselj(0,t))

%3b.
fun = @(x) (besselj(0,x));
zero = fzero(fun,1)

%3c.
% Define the interval [a, b] where you expect the zero to be
a = 0;  % Left endpoint of the interval
b = 10;  % Right endpoint of the interval

% Set a tolerance level for stopping the bisection
tolerance = 1e-6;

% Initialize variables
bisection_error = zeros(1,25);
iteration = 0;

% Start the interval bisection loop
while (b - a) > tolerance
    c = (a + b) / 2;
    bisection_error(iteration + 1) = abs(c - zero)
    if fun(a) * fun(c) < 0
        b = c;
    else
        a = c;
    end
    iteration = iteration + 1;
    
end

% Display the result
bisection_zero = c

%3d Newton Method
dfun = @(x) (-besselj(1,x));

% Choose an initial guess
newton_zero = 2;

% Initialize variables
newton_error = zeros(1,25);
iteration = 0;

% Start the Newton's method loop
while abs(fun(newton_zero)) > tolerance
    x1 = newton_zero - fun(newton_zero) / dfun(newton_zero);
    newton_error(iteration + 1) = abs(x1 - zero);
    
    newton_zero = x1;
    
    iteration = iteration + 1;
end
newton_error
newton_zero

%3e
% Choose an initial guess
% x0 = 2;
% 
% % Set a tolerance level for stopping Picard's method
% tolerance = 1e-6;
% 
% % Initialize variables
% picard_error = []; % Vector to store error at each step
% picard_zero = []; % Vector to store the estimate at each step
% x_current = x0;

% Start the Picard's method loop
% while true
%     x_next = fun(x_current);
% 
%     % Calculate error and store the results
%     error = abs(x_next - x_current);
%     picard_error = [picard_error error];
%     picard_zero = [picard_zero x_next];
% 
%     % Check for convergence based on the tolerance
%     if error < tolerance
%         break; % Converged
%     end
% 
%     x_current = x_next;
% end
figure
xscale = 1:25;
semilogy(xscale,bisection_error,xscale,newton_error)
legend('bisection error','newton error')
% picard_error
% picard_zero
